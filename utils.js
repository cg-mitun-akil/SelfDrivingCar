function lerp(A, B, t) {
    return A + (B - A) * t;
}


function getIntersection(A, B, C, D) {
    const tTop = (D.x - C.x) * (A.y - C.y) - (D.y - C.y) * (A.x - C.x);
    const uTop = (C.y - A.y) * (A.x - B.x) - (C.x - A.x) * (A.y - B.y);
    const bottom = (D.y - C.y) * (B.x - A.x) - (D.x - C.x) * (B.y - A.y);

    if (bottom != 0) {
        const t = tTop / bottom;
        const u = uTop / bottom;
        if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
            return {
                x: lerp(A.x, B.x, t),
                y: lerp(A.y, B.y, t),
                offset: t
            }
        }
    }

    return null;
}

function polysIntersect(poly1, poly2) {
    for (let i = 0; i < poly1.length; i++) {
        for (let j = 0; j < poly2.length; j++) {
            const touch = getIntersection(
                poly1[i],
                poly1[(i + 1) % poly1.length],
                poly2[j],
                poly2[(j + 1) % poly2.length]
            );
            if (touch) {
                return true;
            }
        }
    }
    return false;
}

function getRGBA(value) {
    const alpha = Math.abs(value);
    const R = value < 0 ? 0 : 255;
    const G = R;
    const B = value > 0 ? 0 : 255;
    return "rgba(" + R + "," + G + "," + B + "," + alpha + ")";
}

function feedTest(car) {
    car.brain.levels[0].biases = [
        0.45719113770385444,
        0.47184848305900534,
        -0.012922463296264501,
        -0.32793189242847864,
        0.17565171784500333,
        -0.11698688608814867
    ];

    car.brain.levels[0].weights = [
        [
            0.39622909231087317,
            0.4038869269086802,
            -0.44183112761996607,
            -0.6455984048480902,
            0.32280880976274906,
            0.11125863557559212
        ],
        [
            -0.2186973052941379,
            0.2951641784859189,
            -0.42448448138698563,
            0.40445888986394724,
            0.17627544325888184,
            -0.04821711494335308
        ],
        [
            0.26619001277256404,
            0.23380457007579106,
            0.35484974004340375,
            -0.18546180047083644,
            -0.465356013621931,
            -0.1427252657087185
        ],
        [
            -0.45914798845700844,
            0.5244500871393505,
            -0.3844841590017418,
            -0.015780928623716755,
            -0.05508585991932142,
            -0.4157386441062744
        ],
        [
            0.19665487078008603,
            -0.22307026466207214,
            -0.49877356767094644,
            -0.02625853391526629,
            0.2150786595505405,
            -0.04451680153798874
        ]
    ];

    car.brain.levels[1].biases = [
        0.176537057082085,
        0.1846607370069466,
        0.32704147096784825,
        -0.4003062404181833
    ];

    car.brain.levels[1].weights = [
        [
            -0.47005189605306286,
            0.44951896757712057,
            0.17675240700362235,
            0.592182672381646
        ],
        [
            0.5254790791929572,
            -0.33966522394513815,
            0.4423036660403467,
            0.04888013110153657
        ],
        [
            -0.04825617752040644,
            0.3900459046972974,
            -0.3145538109494695,
            -0.3655088613108449
        ],
        [
            0.19966549696478245,
            0.42256221475774064,
            -0.12295251598260963,
            -0.3741688477297501
        ],
        [
            0.5852326293332422,
            -0.28083730976070725,
            0.10962647441561363,
            -0.5344829550610994
        ],
        [
            0.289452622034559,
            -0.5371342014679896,
            0.14957137970718082,
            -0.2234417308564833
        ]
    ];
    return car;
}
